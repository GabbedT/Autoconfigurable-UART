MAIN CONTROLLER:

Task: FSM to detect errors and configure parameters: data width, parity mode, stop bits, overrun error, parity error, frame error 

SIGNALS: 

Inputs
    clk_i               -> System clock 
    rst_n_i             -> System reset active low
    data_rx_i           -> Data received from the receiver
    data_tx_i           -> Data to be transmitted received from the system bus 
    config_en_i         -> Enable UART configuration from the system bus
    config_i            -> UART configuration from the configuration register / system bus
    device_type_i       -> Device type configuration from the configuration register / system bus
    parity_i            -> Parity bit from the receiver
    rx_fifo_full_i      -> Full signal from the receiver buffer
    tx_fifo_empty_i     -> Empty signal from the transmitter buffer
    rx_fifo_read_i      -> Read signal for the receiver buffer from the system bus
    tx_fifo_write_i     -> Write signal for the transmitter buffer from the system bus
    rx_i                -> Rx line
    is_receiving_i      -> The UART is receiving

Outputs
    tx_o                -> Tx line 
    drive_tx_o          -> The controller is driving th Tx line not the transmitter
    rx_fifo_read_o      -> Read signal for the receiver buffer (can be driven by the controller or the user)
    rx_fifo_write_o     -> Write signal for the receiver buffer (driven only by the controller)
    tx_fifo_read_o      -> Read signal for the transmitter buffer (driven only by the controller)
    tx_fifo_write_o     -> Write signal for the transmitter buffer (can be driven by the controller or the user)
    data_tx_o           -> Data to be transmitted (can be driven by the controller or the user)
    config_en_o         -> Enable UART configuration (can be driven by the controller or the user)
    config_o            -> UART configuration (can be driven by the controller or the user)
    error_o             -> Error type 

The switchs for driving certain signals are implemented into the controller 

ERRORS:

FRAMING ERROR: 
That is precisely the reason. A "framing error" means that the UART saw a low when it was expecting a high (in the middle of the STOP bit pulse).
This means one of:
[1] Your baud rate at sender and receiver are very different, so the receiver (i.e. the PIC) is sampling each bit earlier and earlier, 
so it sometimes sees the end of the 8th bit instead of the middle of the stop bit.
[2] Your sender is sending 9 bits of data, not 8. This could be if it is set to send 8 data bits + a parity bit.
[3] You have a lot of noise on the signal.

DETECTION: IT'S DONE IN THE RECEIVER MODULE!

PARITY ERROR: 
It happens when there is noise in the transmission

DETECTION: 
Compare the xor of the bits and (0,1) with the parity error recieved

CONFIGURATION:
If during configuration state the UART recieves an illegal packet

DETECTION:
Done in fsm with comparison


The configuration of the UART is possible without any reset but data can be lost

Enable configuration and configuration signals are controlled by the wrapping circuit (based on DMA/Bus Architecture). The decoding circuit will take care 
of that.

If the controller doesn't recieve the configuration packet in 3 tries then go into standard config